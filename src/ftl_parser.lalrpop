
use std::str::FromStr;
use ::*;

grammar;

pub program: Program = <statement*> => Program(<>);

statement: Statement = {
    "let " <i:ident> "=" <e:expr> ";" => Statement::VarDecl(i, e),
    "print " <e: expr> ";" => Statement::Print(e),
    "break;" => Statement::Break,
    switch => Statement::Switch(<>),
    "{" <s: statement*> "}" => Statement::Block(s),
};

switch: Switch = "switch " <arg: expr> "{" <cases: case*> "}" 
    => Switch { arg: Box::new(arg), cases: cases };

case: Case = { 
    "case " <n: num> ":" <s: statement> => Case::Case(n, s),
    "default" ":" <s: statement> => Case::Default(s),
};

expr: Expr = {
    <l:expr> "+" <r:factor> => Expr::Add(Box::new(l), Box::new(r)),
    // <l:expr> "-" <r:factor> => Expr::Sub(Box::new(l), Box::new(r)),
    factor,
};

factor: Expr = {
    <l:factor> "*" <r:term> => Expr::Mult(Box::new(l), Box::new(r)),
    // <l:factor> "/" <r:term> => Expr::Div(Box::new(l), Box::new(r)),
    term,
};

term: Expr = {
    r"read\(\)" => Expr::Read,
    num => Expr::I64(<>),
    ident => Expr::Var(<>),
    "(" <e:expr> ")" => e,
};

// stmt_list = <statement*>;

// cases = <case*>;

num: i64 = <s:r"-?[0-9]+"> => i64::from_str(s).unwrap();

ident: String = r"[a-zA-Z_][a-zA-Z_0-9]*" => <>.to_owned();